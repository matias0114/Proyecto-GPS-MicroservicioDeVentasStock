# ============================================================================
# CONFIGURACIÓN DEL MICROSERVICIO DE VENTAS Y STOCK
# ============================================================================

spring.application.name=sales-stock-microservice

# Conexión relacional a la base de datos PostgreSQL
spring.datasource.url=jdbc:postgresql://dpg-d1osq23uibrs73d4hrig-a.oregon-postgres.render.com:5432/postgresss_33h5?sslmode=require&connectTimeout=30&socketTimeout=60&loginTimeout=30
# Credenciales
spring.datasource.username=postgresss_33h5_user
spring.datasource.password=8lsWOLx1Ub4jFnMKJFrnTXZTBcJ2VgbH
spring.datasource.driver-class-name=org.postgresql.Driver

# Configuración de HikariCP para conexiones más robustas
spring.datasource.hikari.connection-timeout=60000
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.validation-timeout=5000
spring.datasource.hikari.leak-detection-threshold=60000

# Configuraci\u00f3n de JPA y Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.connection.handling_mode=delayed_acquisition_and_release_after_transaction

management.endpoints.web.exposure.include=health,info,prometheus
management.endpoint.prometheus.enabled=true
management.endpoints.web.base-path=/actuator

server.port=8084

management.endpoints.web.exposure.include=prometheus
management.endpoint.prometheus.enabled=true
management.metrics.export.prometheus.enabled=true

# ============================================================================
# CONFIGURACIÓN DE MICROSERVICIOS EXTERNOS
# ============================================================================

# URL del microservicio principal (Proyecto-GPS) - Pacientes
app.services.patient.base-url=http://gps-backend:8080

# URL del microservicio de gestión de inventarios
# En desarrollo local usar: http://localhost:8081
# En producción Docker usará el valor por defecto del @Value: http://microservicio-gestion-de-inventarios:8081
app.services.inventory.base-url=http://microservicio-gestion-de-inventarios:8081

# ============================================================================
# CONFIGURACIÓN POR PERFILES (OPCIONAL)
# ============================================================================
# Para desarrollo local:
# spring.profiles.active=dev

# Para producción:  
# spring.profiles.active=prod
